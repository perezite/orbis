TODO:
- Release-Build fixen
- Renderable implementieren
	- Level3 fixen
	- Hilfsmethoden schreiben für:
		- Löschen eines Pointers aus einem std::vector
		- Löschen eines std::vector mit Pointern
	- Ggf. abstrakte Renderer-Klasse entfernen
	- Regressionstest
	- Moral dokumentieren: Komposition (Renderable) ist flexibler als Vererbung (Renderer)	
- Farben im VAO codieren
	- Implementieren dass ein Renderer so viele Meshes hat wie er Transforms hat
	- Triviale Implementation für die vorhandenen Renderer
	- Performance-Regressionstest
	- Das Mesh mit einem optionalen Color Property versehen
	- Die abhängigen Funktionen im Mesh entsprechend anpassen
	- Einen Getter für die Color implementieren
	- Die Color im RenderDevice::UpdateVertexArray abfüllen
	- Die Color im RenderDevice::Render in ein Shader Attribute laden
	- Die Color als ShaderAttribute in den Shadern einbinden
	- Die Color aus dem Material entfernen
	- Die Uniform-Farben wieder entfernen
	- Merge auf Main
- Partikelsystem implementieren
	- Fürs erste fixe Werte implementieren, welche der CenterPropulsion des Balles aus Blear entsprechen:
		- ColorOverLifetime (vorerst nicht als Gradient, sondern als Tween implementieren mit y-Achse = Alphawert)
	- Regression & Performanceregression
- Sinnvolles Inspector-Komponent überlegen
- Die CenterPropulsion des Balls aus Blear nachbauen. Dabei die Werte nach Bedarf tweaken
- Sinnvolles Lifetime Konzept überlegen für Shaders, Textures und Tweens
- Orbis in Bibliothek versiegeln
- Neues Projekt erstellen für die Implementation von Blear Level 1
- Orbis-Library als Submodule einbinden
- Folgende Element des Level1 von Blear implementieren in dieser Reihenfolge
	- Frame
	- Kollisionabfrage	
	- Ball 
	- Propulsion des Balles (nur CenterPropulsion)
	- Paddle
	- Bricks
	- Hintergrund
	- Levellogik mit Anzeigen über Console
	- Resetfunktion mit R