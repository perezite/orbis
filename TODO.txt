TODO:
- Matrix4 und Vector3 löschen
- Math-Klassen zu structs machen
- Analysieren, ob weiter Klassen zu structs gemacht werden sollten	
- Gegebenenfalls Performance-Analyse durchführen
	- Level mit 10 Blocks befüllen
	- Performance-Analyse mit Funktions-Switching
	- Stopwatch-Klasse schreiben
	- Performance-Bottleneck mittels Stopwatch Timing isolieren
	- Falls das auch nicht hilft: Sandbox schreiben 
		- Freies ausprobieren:
			- Rendering gemäss Buch auf Amazon (mit VAO's)
			- Rendering gemäss http://androidblog.reindustries.com/a-real-opengl-es-2-0-2d-tutorial-part-7-texture-atlas/ (auch mit VAO's)
			- Andere Ideen
- Texture Atlas implementieren
	- Mesh Offsets etc. buffern (siehe RenderDevice::Render)
	- Beide Shader gleichschalten, so dass sie die gleichen Uniforms verwenden (selbst wenn diese nicht verwendet werden)
	- Packing-Algorithmus direkt im Level implementieren mithilfe graphischer Darstellung
		-- Referenz: https://www.youtube.com/watch?v=rVp5--Gx6Ks
	- Texture Atlas Klasse implementieren
		- AddRange Methode implementieren, welche mehrere Textures hinzufügt
		- Generate Methode implementieren, welche den Atlas berechnet. Dazu die vorher geschrieben Logik verwenden
		- Die Texture-Klasse so umschreiben, dass sie ggf. den SpriteAtlas verwendet zu dem sie hinzugefügt wurde.
	- RenderDevice anpassen, so dass pro TextureAtlas nur ein einziger DrawCall ausgeführt wird
	- Texture Atlassing in Level1 einbinden  
- Logik in SpriteRenderer und RectangleRenderer fixen (aktuell wird bei jeder Instanz der VBO neu gesetzt mit den immer gleichen Daten)
- Coroutinen implementieren
- Partikelsystem implementieren
- Erzeugung und Vernichtung von Shaders und Textures im VideoManager verwalten
- Orbis in Bibliothek versiegeln