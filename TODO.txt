TODO:	
- Refactoring Levelinstanzierung zwecks Level Switching
	- Switching für alle Levels einbauen
	- Alle Levels auf Funktionalität durchtesten, auch auf Mobile
	- TODO im Code fixen bzw. Refactoring einplanen (Volltextsuche)
	- Initialisierung der Level aus dem Konstruktor rausziehen
	- In Main.cpp pro Level eine Instanz erzeugen und beim LevelManager mit LevelIndex registrieren
	- LevelManager::QueueLevel entsprechend anpassen
- Recherche: Git Stashing
- Refactoring planen
	- Memory Management (ownership)
	- Renderer
	- DebugRenderer
	- Include Files zusammenziehen
	- Inspector-Konzept
	- Componenten-Builder
- Demo erstellen (Level-Switching)
	- Im ersten Level die Switch Buttons hinzufügen
	- Switch Logik implementieren
	- Im zweiten Level die Switch Buttons hinzufügen
	- Switch Logik implementieren
	- Allfällige Fehler fixen
	- Switching für restliche Level hinzufügen
- Include-Files zusammenziehen
- Partikelsystem implementieren
	- Fürs erste fixe Werte implementieren, welche der CenterPropulsion des Balles aus Blear entsprechen:
		- ColorOverLifetime (vorerst nicht als Gradient, sondern als Tween implementieren mit y-Achse = Alphawert)
	- Regression & Performanceregression
- Die CenterPropulsion des Balls aus Blear nachbauen. Dabei die Werte nach Bedarf tweaken
- Sinnvolles Lifetime Konzept überlegen für Shaders, Textures und Tweens
- Orbis in Bibliothek versiegeln
- Neues Projekt erstellen für die Implementation von Blear Level 1
- Orbis-Library als Submodule einbinden
- Folgende Element des Level1 von Blear implementieren in dieser Reihenfolge
	- Frame
	- Kollisionabfrage	
	- Ball 
	- Propulsion des Balles (nur CenterPropulsion)
	- Paddle
	- Bricks
	- Hintergrund
	- Levellogik mit Anzeigen über Console
	- Resetfunktion mit R