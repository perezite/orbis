TODO:  
- Das rotierende Dreieck im Orbis-Style implementieren
	- 'Base' Projekt partiell implementieren
		- Makefiles in build/android/ndk/jni in Unterordner Orbis verschieben und 'Orbis'-Projekt entsprechend anpassen
		- Neuen Unterordner build/android/ndk/jni/Base erstellen und 'Base'-Projekt entsprechend anpassen
		- 'Base' der Solution hinzufügen
		- 'Base'-Projekt Windows Build-Target als Static-Library einstellen
		- 'Base'-Projekt Ant Build-Step überspringen lassen		
		- In 'Orbis' eine Referenz auf 'Base' erstellen
		- Dreiecks-Koordinaten testweise als Vector2D darstellen und testen auf Windows und Android
		- MathHelper, Exception, StringHelper übernehmen
		- Neuen Ordner 'Platform' erstellen und Code aus CheesyHelper übernehmen			
		- Kompilation sicherstellen
		- Testen auf Windows und Android
	- src/Orbis/Platform/Android.cpp erstellen und Code von SDL2CrossPlatform/SDL_android_main.c übernehmen
		- Dieses File ruft die main-Funktion aus src/Orbis/Main.cpp auf	
	- Orbis-Ordner partiell re-implementieren
		- Auflösung aus OrbisMain-Konstruktor entfernen
		- Im OrbisMain Konstruktor unter Windows ein Fenster mit Default-Grösse erzeugen. Unter Android ein Fullscreen-Fenster mit maximaler Auflösung
	- Input-Ordner partiell re-implementieren
		- Orbis.Input.EventAdapter und Orbis.Input.InputManager mergen
		- GetTapDown() und GetTap() implementieren
	- Video-Ordner partiell re-implementieren
		- Orbis.Video.GraphicsAdapter und Orbis.Video.VideoManager mergen
		- Funktionalität aus VideoManager nach RenderDevice verschieben, falls sie nur dort benötigt wird
	- Components-Ordner partiell re-implementieren
		- Component übernehmen
		- SolidRedTriangleRenderer erstellen
	- Game-Ordner re-implementieren
		- Alles übernehmen
	- Testcode erstellen unter src/Orbis/TestGame.cpp welcher
		- Das Programm startet
		- Orbis startet
		- Ein Level erstellt
		- Ein Triangle Entity erstellt
		- Den SolidRedTriangleRenderer hinzufügt
		- Die Transform rotieren lässt
	- 'TestGame' Projekt partiell re-implementieren
		- Das File src/Orbis/TestGame.cpp verschieben nach TestGame/TestGame.cpp
		- Referenzen setzen, auch für Android
		- Kompilation testen
- Die ursprüngliche Orbis-Funktionalität re-implementieren für Windows und Android
	- TODO: Einzelne Schritte einfügen
- Feature-Branch orbis/cross-platform nach master mergen
- orbis.master wieder löschen