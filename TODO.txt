TODO:
- Batching implementieren (vorerst ohne Atlassing) 
	- RenderDevice::FinalizeRendering umschreiben, so dass vor dem Erstellen des VBO und IBO die RenderBatches berechnet werden. In der Schleife wird dann ein Aufruf pro Batch gemacht
	- RenderDevice::RenderBatched erstellen, welches einen einzelnen Batch rendert
- Überprüfen, ob MeshHelper neu RenderBatchHelper heissen soll
- Texture Atlas implementieren
	- Mesh Offsets etc. buffern (siehe RenderDevice::Render)
	- Beide Shader gleichschalten, so dass sie die gleichen Uniforms verwenden (selbst wenn diese nicht verwendet werden)
	- Packing-Algorithmus direkt im Level implementieren mithilfe graphischer Darstellung
		-- Referenz: https://www.youtube.com/watch?v=rVp5--Gx6Ks
	- Texture Atlas Klasse implementieren
		- AddRange Methode implementieren, welche mehrere Textures hinzufügt
		- Generate Methode implementieren, welche den Atlas berechnet. Dazu die vorher geschrieben Logik verwenden
		- Die Texture-Klasse so umschreiben, dass sie ggf. den SpriteAtlas verwendet zu dem sie hinzugefügt wurde.
	- RenderDevice anpassen, so dass pro TextureAtlas nur ein einziger DrawCall ausgeführt wird
	- Texture Atlassing in Level1 einbinden  
- Logik in SpriteRenderer und RectangleRenderer fixen (aktuell wird bei jeder Instanz der VBO neu gesetzt mit den immer gleichen Daten)
- Coroutinen implementieren
- Partikelsystem implementieren
- Asset-Funktionalität implementieren für Meshes, Shaders und Texturen (kontrollierte Erzeugung/Vernichtung)
- Orbis in Bibliothek versiegeln