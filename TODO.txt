TODO:	
- Refactoring
	- Inspector refactoren
		- TweenPropertyInspector erstellen in Orbis
			- Enthält den Code von TweenInspector
			- Methode für Debug SpriteRendering hinzufügen
			- Erstellt keinen SpriteRenderer, sondern ruft DebugRenderDevice->RenderSprite(...) auf
		- TweenPropertyInspector in WobbleBrickEffectInspector einbinden
		- TweenInspector entfernen
	- Tween->update() refactoren. Soll einen Skalarwert zurückgeben
	- Ordner analog den namespaces umbenennen
	- Builder-Pattern für Level implementieren. Pre-Test mit Konsolenprojekt
	- Bootbox und Sandbox in separates Projekt extrahieren, wo sie nicht mit dem restlichen Code kollidieren
	- Renderer gesamthaft refactoren	
	- Code-Styling überdenken (js-style vs a-style)
- Evaluieren, ob weitere Refactorings nötig sind
- Branch mergen		
- Evaluieren, ob der __INTELLISENSE__ fix in Precompiled.h das Intellisense-Problem behoben hat. Ansonsten nochmal schauen.
- Partikelsystem implementieren
	- Fürs erste fixe Werte implementieren, welche der CenterPropulsion des Balles aus Blear entsprechen:
		- ColorOverLifetime (vorerst nicht als Gradient, sondern als Tween implementieren mit y-Achse = Alphawert)
	- Regression & Performanceregression
- Die CenterPropulsion des Balls aus Blear nachbauen. Dabei die Werte nach Bedarf tweaken
- Orbis in Bibliothek versiegeln
- Neues Projekt erstellen für die Implementation von Blear Level 1
- Orbis-Library als Submodule einbinden
- Folgende Element des Level1 von Blear implementieren in dieser Reihenfolge
	- Frame
	- Kollisionabfrage	
	- Ball 
	- Propulsion des Balles (nur CenterPropulsion)
	- Paddle
	- Bricks
	- Hintergrund
	- Levellogik mit Anzeigen über Console
	- Reset mit R-Taste