TODO:  
- Das rotierende Dreieck im Orbis-Style implementieren
	- va_list Problem beheben
		- Ausprobieren, ob das Problem verschwindet mit einem Präprozessor-Makro
	- Wildcard-Includes verwenden in Android-Makefiles
	- Orbis-Ordner partiell re-implementieren
		- Auflösung aus OrbisMain-Konstruktor entfernen
		- Im OrbisMain Konstruktor unter Windows ein Fenster mit Default-Grösse erzeugen. Unter Android ein Fullscreen-Fenster mit maximaler Auflösung
	- Input-Ordner partiell re-implementieren
		- Orbis.Input.EventAdapter und Orbis.Input.InputManager mergen
		- GetTapDown() und GetTap() implementieren
	- Video-Ordner partiell re-implementieren
		- Orbis.Video.GraphicsAdapter und Orbis.Video.VideoManager mergen
		- Funktionalität aus VideoManager nach RenderDevice verschieben, falls sie nur dort benötigt wird
	- Components-Ordner partiell re-implementieren
		- Component übernehmen
		- SolidRedTriangleRenderer erstellen
	- Game-Ordner re-implementieren
		- Alles übernehmen
	- Testcode erstellen unter src/Orbis/TestGame.cpp welcher
		- Das Programm startet
		- Orbis startet
		- Ein Level erstellt
		- Ein Triangle Entity erstellt
		- Den SolidRedTriangleRenderer hinzufügt
		- Die Transform rotieren lässt
	- 'ExampleGame' Projekt partiell re-implementieren
		- Das File src/Orbis/TestGame.cpp verschieben nach TestGame/TestGame.cpp
		- Referenzen setzen, auch für Android
		- Kompilation testen
- Die ursprüngliche Orbis-Funktionalität re-implementieren für Windows und Android
	- TODO: Einzelne Schritte einfügen
- Feature-Branch orbis/cross-platform nach master mergen
- orbis.master wieder löschen