TODO:	
- Refactoring planen
	- Liste für Refactoring-Arbeiten als Punkt hier eintragen und obige Punkte löschen
		- Json-Logik extrahieren in BezierCurve.cpp, BezierCurve, Vector2D, StringHelper, TweenInspector, Tween
		- BezierCurve umbenennen in Spline
		- Include-Files wenn möglich zusammenziehen (schauen wie das bei SFML gemacht wurdes)
		- Header und Sourcefiles aufsplitten
		- Helpers entweder umbenennen in Util oder das Util gleich komplett weglassen
		- StringHelper::Load() in separate Klasse Serialization verschieben
		- Tween::Update Funktion soll den neuen Wert zurückgeben anstatt einen Zeiger zu nehmen. Und soll ausserdem nicht mehr Update() heissen!
		- Der Inspector soll an der Komponente hängen, nicht am Entity
		- Builder-Pattern für Level implementieren. Pre-Test mit Konsolenprojekt
		- Bootbox und Sandbox in separates Projekt extrahieren, wo sie nicht mit dem restlichen Code kollidieren
		- Renderer gesamthaft refactoren		
		- Branch mergen		
- Intellisense-Problem beheben
- Den kompletten Source-Code inspizieren und falls nötig weiteres Refactoring planen
- Partikelsystem implementieren
	- Fürs erste fixe Werte implementieren, welche der CenterPropulsion des Balles aus Blear entsprechen:
		- ColorOverLifetime (vorerst nicht als Gradient, sondern als Tween implementieren mit y-Achse = Alphawert)
	- Regression & Performanceregression
- Die CenterPropulsion des Balls aus Blear nachbauen. Dabei die Werte nach Bedarf tweaken
- Orbis in Bibliothek versiegeln
- Neues Projekt erstellen für die Implementation von Blear Level 1
- Orbis-Library als Submodule einbinden
- Folgende Element des Level1 von Blear implementieren in dieser Reihenfolge
	- Frame
	- Kollisionabfrage	
	- Ball 
	- Propulsion des Balles (nur CenterPropulsion)
	- Paddle
	- Bricks
	- Hintergrund
	- Levellogik mit Anzeigen über Console
	- Resetfunktion mit R