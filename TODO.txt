TODO:
- Den Build-Ordner umstellen in SDL2CrossPlatform
	- build/windows erstellen
		- build/windows/lib mit Windows SDL-Files befüllen 
		- build/windows/include mit Windows SDL-Files befüllen
		- Ordner build/common erstellen
		- build/android/lib-build/OpenGLEngine anheben auf build/common/lib-build
		- Die OpenGLEngine auch für Windows kompilierbar machen
			- Folgende Struktur unter ../OpenGLEngine erstellen:
				- src
				- build
				- bin
			- Die vorhandenen Android-Projekt Files verschieben nach build/android und die Pfade in den Makefiles anpassen
			- Implementieren, dass die Android-Kompilate in bin landen
			- C:\Program Files (x86)\CodeBlocks\MinGW\bin zu System-Path hinzufügen
			- Unter build/windows ein einfaches Batch-Projekt zum Kompilieren machen
			- Die Windows-DLL verfrachten nach build/windows/lib
	- Das Projekt verschieben nach build/projects (liegt aktell in build/android/vs-tegra/SDL2Test)
	- build/android/include/OpenGLEngine anheben auf build/common/include/OpenGLEngine
	- Die Ordner-Referenzen anpassen im Projekt, so dass beide Plattformen kompilerbar sind
	- Im Ordner Android und Windows befinden sich jeweils:
      - Ein temp-Ordner mit den temporär-Files
      - Die Ordner include, lib, lib-build (für Android, aktuell nicht nötig für Windows)
- Ein rotierendes Dreieck kompilierbar machen für Windows unter SDL2CrossPlatform
    - Code implementieren für Windows
	- Code implementieren für Android
	- Common-Code abstrahieren
- Feature-Brach von SDL2CrossPlatform mergen
- Feature-Branch in orbis erstellen
- Den Code in Orbis im Feature-Branch ersetzen durch Templates/SDL2CrossPlatform
- Die orbis-Funktionalität für beide Plattformen schrittweise wieder einbauen in dem übernommenen Code
- Feature-Branch mergen