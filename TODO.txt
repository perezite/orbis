TODO:	
- Bootstrapping
- Interface an SFML angleichen		
	- Tutorials von SFML durchgehen 
		UND parallel dazu den SFML Sourcecode anschauen
		UND parallel dazu nacheinander die relevanten Klassen refactoren (inkl. Referenzen zurückgeben anstatt Zeiger, wo möglich)
		-- Ifdefs benutzen um zw. alter und neuer Implementation zu wechseln
		-- Null-Funktionen für entfernte oder neue Funktionen verwenden
		-- Current: https://www.sfml-dev.org/tutorials/2.5/graphics-draw.php
		-- Liste der Klassen zum refactoren:
			- TextureChart
			- Shader
			- RenderDevice
			- DebugRenderDevice
	- Zweiter Refactoring-Durchlauf: Rekursiv top-down alle Klassen durchgehen und wo nötig das Interface refactoren und dabei sukzessive den obigen Entwurf einkommentieren
- Problem lösen, dass die Checksumme unterschiedlich ist im Stromsparmodus
- Base in Orbis reinziehen und Base-Projekt entfernen
- Interne Interfaces soweit als möglich analog den externen implementieren
	- Alle Orbis- und Base-Klassen durchgehen und parallel dazu in den Docs Header-Files erstellen mit den Interfaces wie ich sie mir vorstelle
- Evaluieren, ob weitere Refactorings nötig sind und ggf. hier ins TODO aufnehmen	
- Partikelsystem implementieren
	- Fürs erste fixe Werte implementieren, welche der CenterPropulsion des Balles aus Blear entsprechen:
		- ColorOverLifetime (vorerst nicht als Gradient, sondern als Tween implementieren mit y-Achse = Alphawert)
	- Regression & Performanceregression
- Die CenterPropulsion des bu
	- Ball 
	- Propulsion des Balles (nur CenterPropulsion)
	- Paddle
	- Bricks
	- Hintergrund
	- Levellogik mit Anzeigen über Console
	- Reset mit R-Taste