TODO:	
- Recherche: Git Stashing
- Kompilationszeit verbessern anhand des folgenden Artikels: https://blogs.msdn.microsoft.com/vcblog/2016/10/26/recommendations-to-speed-c-builds-in-visual-studio/
- Refactoring planen
	- Mal schauen, wie das bei jvgs gelöst wurde
	- Überlegen, ob ich alle Manager-Singletons loswerde und stattdessen Systems-Klassen mit Hierarchien mache
	- Aufruf von ClearRenderables in Level.cpp an passende Stelle refactoren
	- Memory Management (ownership)
		- Temp-Comments entfernen, welche ich durch schlechtes Memory-Management einbauen musste
	- Renderer
	- Überlegen, ob ich statt LevelManager::QueueLevel(new Level1()) sowas mache wie LevelManager::QueueLevel("Level1");
	- DebugRenderer
	- Include Files zusammenziehen
	- Inspector-Konzept
	- Componenten-Builder
	- Helper -> Util
	- Evtl. ein Sandbox-Projekt machen dafür
- Demo erstellen (Level-Switching)
	- Im ersten Level die Switch Buttons hinzufügen
	- Switch Logik implementieren
	- Im zweiten Level die Switch Buttons hinzufügen
	- Switch Logik implementieren
	- Allfällige Fehler fixen
	- Switching für restliche Level hinzufügen
- Include-Files zusammenziehen
- Partikelsystem implementieren
	- Fürs erste fixe Werte implementieren, welche der CenterPropulsion des Balles aus Blear entsprechen:
		- ColorOverLifetime (vorerst nicht als Gradient, sondern als Tween implementieren mit y-Achse = Alphawert)
	- Regression & Performanceregression
- Die CenterPropulsion des Balls aus Blear nachbauen. Dabei die Werte nach Bedarf tweaken
- Sinnvolles Lifetime Konzept überlegen für Shaders, Textures und Tweens
- Orbis in Bibliothek versiegeln
- Neues Projekt erstellen für die Implementation von Blear Level 1
- Orbis-Library als Submodule einbinden
- Folgende Element des Level1 von Blear implementieren in dieser Reihenfolge
	- Frame
	- Kollisionabfrage	
	- Ball 
	- Propulsion des Balles (nur CenterPropulsion)
	- Paddle
	- Bricks
	- Hintergrund
	- Levellogik mit Anzeigen über Console
	- Resetfunktion mit R